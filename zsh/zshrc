# Path to your oh-my-zsh configuration.
export ZSH=$HOME/.oh-my-zsh
plugins=(rvm zsh-syntax-highlighting vagrant heroku brew gem git-extras)
export DISABLE_AUTO_UPDATE="true" # Don't let oh-my-zsh auto update
export ZSH_THEME="cjt" # Zsh theme, loaded from ~/.oh-my-zsh/themese. Set to 'random' for fun
source $ZSH/oh-my-zsh.sh

export BUNDLER_EDITOR='vim'
# alias vim=/Applications/MacVim.app/Contents/MacOS/Vim

# Prevent correct of git slog
alias guard='nocorrect guard'
alias be='bundle exec'

# automatically pushd
setopt auto_pushd
export dirstacksize=10
alias lsd='dirs -v'
alias cld='cd +1'
function csd() { cd +$1 }

# Toggle airport for wifi from the terminal
airport() { networksetup -setairportpower airport $1 }

## case-insensitive (all),partial-word and then substring completion
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' \
    'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

# Quick jumping to ~/code & $HOME directories
c(){cd ~/code/$1;}
compctl -W ~/code -/ c
h(){cd ~/$1;}
compctl -W ~/ -/ h

# List all symlinks in current directory #TODO where do they point?
lns() { find ./ -type l -maxdepth 1 | awk '{ sub(/.\/+/, ""); print }' }
lnsm() { find -L ./ -maxdepth 1 -type l | awk '{ sub(/.\/+/, ""); print }' }

function rspec() {
  if [ -S .zeus.sock ]; then
    zeus rspec "$@"
  else
    bundle exec command rspec "$@"
  fi
}

function rake() {
  if [ -S .zeus.sock ]; then
    zeus rake "$@"
  else
    bundle exec command rake "$@"
  fi
}

alias zs="zeus start"
alias zc="zeus console"

function dash(){open dash://"$@"}

# Serve the current directory. Pass in a port, or use default 8000
function simple_serve { $(which python) -m SimpleHTTPServer ${1:-8000} }

alias pow=powder

alias ql='qlmanage -p "$@" > /dev/null'

# Growl notify function
function growl { growlnotify -s "That long running thing is done" -m "Finished!" }

function trash() { mv $1 ~/.Trash }

function mkcd() { mkdir $1 && cd $1 }

function mkrvm() {
    mkdir $1 && echo "rvm use 1.9.3@$1 --create" > $1/.rvmrc && cd $1
}

eval "$(hub alias -s)"
function g {
    if [[ $# > 0 ]]; then
        git $@
    else
        git status --short --branch
    fi
}

function current_branch() {
    ref=$(git symbolic-ref HEAD 2> /dev/null) || return
    echo ${ref#refs/heads/}
}

function gitup {
    if git rev-parse --git-dir > /dev/null 2>&1; then
        cd "./"$(git rev-parse --show-cdup)
    else
        return
    fi
}

function gitcount {
    commit_count=`git log --pretty=oneline | wc -l | awk '{print $1}'`
    echo "  -> Total commits to date: $commit_count"
}

function gitopen {
    url=`git remote show origin | grep 'Fetch' | sed 's/.*git:\/\/\(.*\).git$/http:\/\/\1/'`
    open $url
}

function gitlag {
    lag=`git fetch && git log --pretty=oneline master..origin/master | wc -l | awk '{print $1}'`
    echo "Master branch currently behind by $lag commits"
}

# Stolen from Gary Bernhardt
# Use C-x C-e to edit the current command line
autoload -U edit-command-line
zle -N edit-command-line
bindkey '\C-y' edit-command-line

function ackjs { ack $1 --js app/assets/javascripts }
function ackvim { ack $1 -a ~/code/dotfiles/vim/vimrc ~/code/dotfiles/vim/rcplugins/ ~/code/dotfiles/vim/rcfiles/ }

function dbpullheroku {heroku db:pull --app $(production_app_name) --confirm $(production_app_name)}

function heroku_url { heroku apps:info -r $1 | grep -i web  | tr -s ' ' | cut -d ' ' -f 3 }

# cjt command -- my grab bag based on https://github.com/37signals/sub
[[ -f ~/code/cjt/bin/cjt ]] && eval "$(/Users/nation/code/cjt/bin/cjt init -)"

# Convenice aliases
alias ls="ls -FG"
alias l="ls -l"
alias la="ls -la"

alias ez='vim ~/.zshrc'
alias sz='source ~/.zshrc'

alias jp='python -mjson.tool'

# Markdown preview to html with local css
function mkd2tmphtml {
    tempfile="/tmp/$$.html";
    pandoc $1 -t html -c $HOME/.pandoc-mkd-style.css > $tempfile;
    open $tempfile;
    return 0;
}

# Do not autoupdate tmux window titles
export DISABLE_AUTO_TITLE="true"

function pgstart { pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start }
function pgstop { pg_ctl -D /usr/local/var/postgres stop }

# Tmux aliases
alias tls="tmux list-sessions"
alias tka="tmux kill-session"
function tb { tmux break-pane -d -t $1 }
function ta {
    if [ -z "$1" ]; then
        tmux attach
    else
        tmux attach-session -t $1
    fi
}
function tn {
  if [ -z "$1" ]; then
      session_name=$(basename `pwd`)
  else
      session_name=$1
  fi
  tmux new-session -d -s $session_name -n vim
  if [ -f zeus.json ]; then
    tmux new-window -t $session_name -n zeus
    tmux send-keys -t $session_name:2 'zeus start' C-m
    tmux select-window -t $session_name:1
  fi
  tmux attach-session -t $session_name
}
alias stm="script/tmux-rails"

# Some fun with switching the foreground terminal process
# Use Ctrl-z to freeze current fg process (ie vim), do something else
# in the shell, ie manpage lookup, then use Ctrl-g to get back to vim
# ref: http://oinopa.com/2010/10/24/laptop-driven-development.html
# TODO Get Ctrl-f set as the freeze command
export HISTIGNORE="fg*"
bindkey -s '\C-g' 'fg\n'
# bind '"\C-g": "fg %-\n"'  ----The Bash way

# Don't attempt spelling autocorrect
unsetopt correct_all

# Customize to your needs...
export PATH=$HOME/local/bin:$PATH:$HOME/bin:/usr/local/mysql/bin:/opt/local/bin:/opt/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/git/bin:/usr/X11/bin

# use .localrc for settings specific to one system
[[ -f ~/.localrc ]] && . ~/.localrc

[[ -s $HOME/.rvm/scripts/rvm ]] && source $HOME/.rvm/scripts/rvm

PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting

hitch() {
  command hitch "$@"
  if [[ -s "$HOME/.hitch_export_authors" ]] ; then source "$HOME/.hitch_export_authors" ; fi
}
alias unhitch='hitch -u'
