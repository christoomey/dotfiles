" COC - the Conquerer of Completion

Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'coc-extensions/coc-svelte', {'do': 'yarn install --frozen-lockfile && yarn build'}

function! s:RestartCoc() abort
  silent! CocRestart
  echohl String | echom 'Restarting COC...' | echohl None
endfunction
command! RestartCoc call s:RestartCoc()
nnoremap <leader>re :RestartCoc<cr>


" coc-css coc-html coc-json coc-prettier coc-svelte coc-tailwindcss coc-tsserver coc-yaml

" coc-css
" coc-eslint
" coc-highlight
" coc-html
" coc-json
" coc-prettier
" coc-solargraph
" coc-tailwindcss
" coc-tsserver
" coc-yaml
" coc.nvim
" coc-snippets

inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

let g:coc_snippet_next = '<tab>'

nnoremap <leader>es :vsplit<cr>:CocCommand snippets.editSnippets<cr>

" let g:coc_global_extensions = [
"   \ 'coc-tsserver'
"   \ ]
" if isdirectory('./node_modules') && isdirectory('./node_modules/prettier')
"   let g:coc_global_extensions += ['coc-prettier']
" endif

" if isdirectory('./node_modules') && isdirectory('./node_modules/eslint')
"   let g:coc_global_extensions += ['coc-eslint']
" endif

" let g:coc_global_extensions = ['coc-solargraph']

nmap <silent> <C-]> <Plug>(coc-definition)

nmap <leader>do <Plug>(coc-codeaction)

" Jump to next / previous error
nmap <silent> [r <Plug>(coc-diagnostic-prev)
nmap <silent> ]r <Plug>(coc-diagnostic-next)

" show documentation
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction
nnoremap <silent> K :call <SID>show_documentation()<CR>

" show error, otherwise documentation, on hold
function! ShowDocIfNoDiagnostic(timer_id)
  " if (coc#util#has_float() == 0)
  silent call CocActionAsync('doHover')
  " endif
endfunction
function! s:show_hover_doc()
  call timer_start(200, 'ShowDocIfNoDiagnostic')
endfunction
nnoremap <leader>k :call <SID>show_hover_doc()<cr>

" vim:ft=vim

