#!/usr/bin/env -S ruby --disable-gems -x

require 'optparse'

class TabOpener
  TAB_NOT_FOUND = :tab_not_found

  def initialize(app_url, options)
    @app_url = app_url
    @options = options
  end

  def self.open_for(app_url, options)
    new(app_url, options).open!
  end

  def open!
    if tab_exists?
      activate app_tab
    else
      open_app_in_new_tab
    end
    unless options[:detached]
      focus_chrome
    end
  end

  private

  attr_reader :app_url, :options

  def app_tab
    @app_tab ||= begin
                   tab_info = `chrome-cli list links | grep -Fn '#{app_url}' | cut -d ':' -f 1`.chomp.to_i
                   if tab_info != 0
                     tab_info
                   else
                     TAB_NOT_FOUND
                   end
                 end
  end

  def open_app_in_new_tab
    system "chrome-cli open #{app_url} > /dev/null 2>&1"
  end

  def tab_exists?
    app_tab != TAB_NOT_FOUND
  end

  def activate(tab_index)
    system "osascript -e 'tell application \"Google Chrome\" to set active tab index of first window to #{tab_index}'"
  end

  def focus_chrome
    system %{osascript -e 'tell application \"Google Chrome\" to activate'}
  end
end

def desired_app_url
  if app_url = ARGV[0]
    app_url
  else
    project_name = Dir.pwd.split("/").last
    "http://#{project_name}.dev"
  end
end

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: open-tab [options] [<tab-url>]"

  opts.on("-r", "--[no-]reload", "Reload tab after activating") do |r|
    options[:reload] = r
  end

  opts.on("-d", "--detached", "Detached -- do not focus chrome") do |d|
    options[:detached] = d
  end
end.parse!

TabOpener.open_for(desired_app_url, options)
